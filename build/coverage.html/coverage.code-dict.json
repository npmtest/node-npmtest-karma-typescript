{"/home/travis/build/npmtest/node-npmtest-karma-typescript/test.js":"/* istanbul instrument in package npmtest_karma_typescript */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-karma-typescript/lib.npmtest_karma_typescript.js":"/* istanbul instrument in package npmtest_karma_typescript */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_karma_typescript = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_karma_typescript = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-karma-typescript/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-karma-typescript && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_karma_typescript */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_karma_typescript\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_karma_typescript.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_karma_typescript.rollup.js'] =\n            local.assetsDict['/assets.npmtest_karma_typescript.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_karma_typescript.__dirname + '/lib.npmtest_karma_typescript.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-karma-typescript/node_modules/karma-typescript/dist/index.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar log4js = require(\"log4js\");\nvar bundler_1 = require(\"./bundler/bundler\");\nvar dependency_walker_1 = require(\"./bundler/dependency-walker\");\nvar globals_1 = require(\"./bundler/globals\");\nvar resolver_1 = require(\"./bundler/resolve/resolver\");\nvar source_reader_1 = require(\"./bundler/resolve/source-reader\");\nvar transformer_1 = require(\"./bundler/transformer\");\nvar validator_1 = require(\"./bundler/validator\");\nvar compiler_1 = require(\"./compiler/compiler\");\nvar coverage_1 = require(\"./istanbul/coverage\");\nvar threshold_1 = require(\"./istanbul/threshold\");\nvar framework_1 = require(\"./karma/framework\");\nvar preprocessor_1 = require(\"./karma/preprocessor\");\nvar reporter_1 = require(\"./karma/reporter\");\nvar configuration_1 = require(\"./shared/configuration\");\nvar project_1 = require(\"./shared/project\");\nvar loggers = {\n    bundler: log4js.getLogger(\"bundler.karma-typescript\"),\n    compiler: log4js.getLogger(\"compiler.karma-typescript\"),\n    dependencyWalker: log4js.getLogger(\"dependency-walker.karma-typescript\"),\n    project: log4js.getLogger(\"project.karma-typescript\"),\n    resolver: log4js.getLogger(\"resolver.karma-typescript\"),\n    sourceReader: log4js.getLogger(\"source-reader.karma-typescript\"),\n    threshold: log4js.getLogger(\"threshold.karma-typescript\")\n};\nvar sharedProcessedFiles = {};\nvar configuration = new configuration_1.Configuration(loggers);\nvar project = new project_1.Project(configuration, loggers.project);\nvar dependencyWalker = new dependency_walker_1.DependencyWalker(loggers.dependencyWalker);\nvar compiler = new compiler_1.Compiler(loggers.compiler, project);\nvar coverage = new coverage_1.Coverage(configuration);\nvar transformer = new transformer_1.Transformer(configuration, project);\nvar threshold = new threshold_1.Threshold(configuration, loggers.threshold);\nvar validator = new validator_1.Validator(configuration);\nvar sourceReader = new source_reader_1.SourceReader(configuration, loggers.sourceReader, transformer);\nvar resolver = new resolver_1.Resolver(configuration, dependencyWalker, loggers.resolver, sourceReader);\nvar globals = new globals_1.Globals(configuration, resolver);\nvar bundler = new bundler_1.Bundler(configuration, dependencyWalker, globals, loggers.bundler, project, resolver, transformer, validator);\nvar framework = new framework_1.Framework(bundler, configuration, coverage, resolver);\nvar preprocessor = new preprocessor_1.Preprocessor(bundler, compiler, configuration, coverage, sharedProcessedFiles);\nvar reporter = new reporter_1.Reporter(configuration, sharedProcessedFiles, threshold);\nmodule.exports = {\n    \"framework:karma-typescript\": [\"factory\", framework.create],\n    \"preprocessor:karma-typescript\": [\"factory\", preprocessor.create],\n    \"reporter:karma-typescript\": [\"type\", reporter.create]\n};\n","/home/travis/build/npmtest/node-npmtest-karma-typescript/node_modules/karma-typescript/dist/bundler/bundler.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar async = require(\"async\");\nvar fs = require(\"fs\");\nvar lodash = require(\"lodash\");\nvar os = require(\"os\");\nvar path = require(\"path\");\nvar tmp = require(\"tmp\");\nvar benchmark_1 = require(\"../shared/benchmark\");\nvar PathTool = require(\"../shared/path-tool\");\nvar bundle_item_1 = require(\"./bundle-item\");\nvar SourceMap = require(\"./source-map\");\nvar Bundler = (function () {\n    function Bundler(config, dependencyWalker, globals, log, project, resolver, transformer, validator) {\n        this.config = config;\n        this.dependencyWalker = dependencyWalker;\n        this.globals = globals;\n        this.log = log;\n        this.project = project;\n        this.resolver = resolver;\n        this.transformer = transformer;\n        this.validator = validator;\n        this.BUNDLE_DELAY = 500;\n        this.bundleQueuedModulesDeferred = lodash.debounce(this.bundleQueuedModules, this.BUNDLE_DELAY);\n        this.bundleBuffer = [];\n        this.bundleFile = tmp.fileSync({\n            postfix: \".js\",\n            prefix: \"karma-typescript-bundle-\"\n        });\n        this.bundleQueue = [];\n        this.entrypoints = [];\n        this.projectImportCountOnFirstRun = undefined;\n    }\n    Bundler.prototype.attach = function (files) {\n        files.unshift({\n            included: true,\n            pattern: this.bundleFile.name,\n            served: true,\n            watched: true\n        });\n        files.push({\n            included: true,\n            pattern: path.join(__dirname, \"../../src/client/commonjs.js\"),\n            served: true,\n            watched: false\n        });\n    };\n    Bundler.prototype.bundle = function (file, emitOutput, callback) {\n        this.bundleQueue.push({ callback: callback, emitOutput: emitOutput, file: file });\n        this.bundleQueuedModulesDeferred();\n    };\n    Bundler.prototype.bundleQueuedModules = function () {\n        var _this = this;\n        var benchmark = new benchmark_1.Benchmark();\n        this.transformer.applyTsTransforms(this.bundleQueue, function () {\n            _this.bundleQueue.forEach(function (queued) {\n                queued.item = new bundle_item_1.BundleItem(queued.file.path, queued.file.originalPath, SourceMap.create(queued.file, queued.emitOutput.sourceFile.text, queued.emitOutput));\n            });\n            var dependencyCount = _this.dependencyWalker.collectTypescriptDependencies(_this.bundleQueue);\n            if (_this.shouldBundle(dependencyCount)) {\n                _this.bundleWithLoader(benchmark);\n            }\n            else {\n                _this.bundleWithoutLoader();\n            }\n        });\n    };\n    Bundler.prototype.shouldBundle = function (dependencyCount) {\n        if (this.config.hasPreprocessor(\"commonjs\")) {\n            this.log.debug(\"Preprocessor 'commonjs' detected, code will NOT be bundled\");\n            return false;\n        }\n        if (!this.project.hasCompatibleModuleKind()) {\n            this.log.debug(\"Module kind set to '%s', code will NOT be bundled\", this.project.getModuleKind());\n            return false;\n        }\n        if (this.projectImportCountOnFirstRun === undefined) {\n            this.projectImportCountOnFirstRun = dependencyCount;\n        }\n        this.log.debug(\"Project has %s import/require statements, code will be%sbundled\", this.projectImportCountOnFirstRun, this.projectImportCountOnFirstRun > 0 ? \" \" : \" NOT \");\n        return this.projectImportCountOnFirstRun > 0;\n    };\n    Bundler.prototype.bundleWithLoader = function (benchmark) {\n        var _this = this;\n        async.each(this.bundleQueue, function (queued, onQueuedResolved) {\n            _this.addEntrypointFilename(queued.item.filename);\n            async.each(queued.item.dependencies, function (bundleItem, onDependencyResolved) {\n                if (!bundleItem.isTypescriptFile() &&\n                    !(bundleItem.isTypingsFile() && !bundleItem.isNpmModule())) {\n                    _this.resolver.resolveModule(queued.item.moduleName, bundleItem, _this.bundleBuffer, function () {\n                        onDependencyResolved();\n                    });\n                }\n                else {\n                    process.nextTick(function () {\n                        onDependencyResolved();\n                    });\n                }\n            }, onQueuedResolved);\n        }, function () {\n            _this.onAllResolved(benchmark);\n        });\n    };\n    Bundler.prototype.bundleWithoutLoader = function () {\n        var _this = this;\n        this.globals.add(this.bundleBuffer, this.entrypoints, function () {\n            _this.writeMainBundleFile(function () {\n                _this.bundleQueue.forEach(function (queued) {\n                    queued.callback(queued.item.source);\n                });\n            });\n        });\n    };\n    Bundler.prototype.onAllResolved = function (benchmark) {\n        var _this = this;\n        this.orderEntrypoints();\n        this.globals.add(this.bundleBuffer, this.entrypoints, function () {\n            _this.writeMainBundleFile(function () {\n                _this.log.info(\"Bundled imports for %s file(s) in %s ms.\", _this.bundleQueue.length, benchmark.elapsed());\n                _this.bundleQueue.forEach(function (queued) {\n                    queued.callback(_this.addLoaderFunction(queued.item, true));\n                });\n                _this.log.debug(\"Karma callbacks for %s file(s) in %s ms.\", _this.bundleQueue.length, benchmark.elapsed());\n                _this.bundleQueue.length = 0;\n            });\n        });\n    };\n    Bundler.prototype.addLoaderFunction = function (bundleItem, standalone) {\n        var _this = this;\n        var dependencyMap = {};\n        var moduleId = path.relative(this.config.karma.basePath, bundleItem.filename);\n        bundleItem.dependencies.forEach(function (dependency) {\n            if (!dependency.filename) {\n                _this.log.debug(\"No resolved filename for module [%s], required by [%s]\", dependency.moduleName, bundleItem.filename);\n            }\n            else {\n                dependencyMap[dependency.moduleName] = PathTool.fixWindowsPath(dependency.filename);\n            }\n        });\n        return (standalone ? \"(function(global){\" : \"\") +\n            \"global.wrappers['\" + PathTool.fixWindowsPath(bundleItem.filename) + \"']=\" +\n            \"[function(require,module,exports,__dirname,__filename){ \" + bundleItem.source +\n            os.EOL + \"},'\" +\n            PathTool.fixWindowsPath(moduleId) + \"',\" +\n            PathTool.fixWindowsPath(JSON.stringify(dependencyMap)) + \"];\" +\n            (standalone ? \"})(this);\" : \"\") + os.EOL;\n    };\n    Bundler.prototype.createEntrypointFilenames = function () {\n        if (this.entrypoints.length > 0) {\n            return \"global.entrypointFilenames=['\" + this.entrypoints.join(\"','\") + \"'];\" + os.EOL;\n        }\n        return \"\";\n    };\n    Bundler.prototype.addEntrypointFilename = function (filename) {\n        if (this.config.bundlerOptions.entrypoints.test(filename) &&\n            this.entrypoints.indexOf(filename) === -1) {\n            this.entrypoints.push(filename);\n        }\n    };\n    Bundler.prototype.orderEntrypoints = function () {\n        var _this = this;\n        var orderedEntrypoints = [];\n        this.project.getKarmaFiles().forEach(function (filename) {\n            if (_this.entrypoints.indexOf(filename) !== -1) {\n                orderedEntrypoints.push(filename);\n            }\n        });\n        this.entrypoints = orderedEntrypoints;\n    };\n    Bundler.prototype.writeMainBundleFile = function (onMainBundleFileWritten) {\n        var _this = this;\n        var bundle = \"(function(global){\" + os.EOL +\n            \"global.wrappers={};\" + os.EOL;\n        this.bundleBuffer.forEach(function (bundleItem) {\n            bundle += _this.addLoaderFunction(bundleItem, false);\n        });\n        bundle += this.createEntrypointFilenames() + \"})(this);\";\n        fs.writeFile(this.bundleFile.name, bundle, function (error) {\n            if (error) {\n                throw error;\n            }\n            _this.validator.validate(bundle, _this.bundleFile.name);\n            onMainBundleFileWritten();\n        });\n    };\n    return Bundler;\n}());\nexports.Bundler = Bundler;\n","/home/travis/build/npmtest/node-npmtest-karma-typescript/node_modules/karma-typescript/dist/shared/benchmark.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Benchmark = (function () {\n    function Benchmark() {\n        this.start = process.hrtime();\n    }\n    Benchmark.prototype.elapsed = function () {\n        var end = process.hrtime(this.start);\n        return Math.round((end[0] * 1000) + (end[1] / 1000000));\n    };\n    return Benchmark;\n}());\nexports.Benchmark = Benchmark;\n","/home/travis/build/npmtest/node-npmtest-karma-typescript/node_modules/karma-typescript/dist/shared/path-tool.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction fixWindowsPath(value) {\n    return value.replace(/\\\\/g, \"/\");\n}\nexports.fixWindowsPath = fixWindowsPath;\n","/home/travis/build/npmtest/node-npmtest-karma-typescript/node_modules/karma-typescript/dist/bundler/bundle-item.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar BundleItem = (function () {\n    function BundleItem(moduleName, filename, source, dependencies) {\n        if (dependencies === void 0) { dependencies = []; }\n        this.moduleName = moduleName;\n        this.filename = filename;\n        this.source = source;\n        this.dependencies = dependencies;\n    }\n    BundleItem.prototype.isNpmModule = function () {\n        return this.moduleName.charAt(0) !== \".\" && this.moduleName.charAt(0) !== \"/\";\n    };\n    BundleItem.prototype.isScript = function () {\n        return this.filename && /\\.(js|jsx|ts|tsx)$/.test(this.filename);\n    };\n    BundleItem.prototype.isTypingsFile = function () {\n        return this.filename && /\\.d\\.ts$/.test(this.filename);\n    };\n    BundleItem.prototype.isTypescriptFile = function () {\n        return this.filename && !this.isTypingsFile() && /\\.(ts|tsx)$/.test(this.filename);\n    };\n    return BundleItem;\n}());\nexports.BundleItem = BundleItem;\n","/home/travis/build/npmtest/node-npmtest-karma-typescript/node_modules/karma-typescript/dist/bundler/source-map.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar path = require(\"path\");\nfunction create(file, source, emitOutput) {\n    var result = emitOutput.outputText;\n    var map;\n    var datauri;\n    if (emitOutput.sourceMapText) {\n        map = JSON.parse(emitOutput.sourceMapText);\n        map.sources[0] = path.basename(file.originalPath);\n        map.sourcesContent = [source];\n        map.file = path.basename(file.path);\n        datauri = \"data:application/json;charset=utf-8;base64,\" + new Buffer(JSON.stringify(map)).toString(\"base64\");\n        result = result.replace(createComment(file), \"//# sourceMappingURL=\" + datauri);\n    }\n    return result;\n}\nexports.create = create;\nfunction createComment(file) {\n    return \"//# sourceMappingURL=\" + path.basename(file.path) + \".map\";\n}\nexports.createComment = createComment;\nfunction deleteComment(source) {\n    return source.replace(/\\/\\/#\\s?sourceMappingURL\\s?=\\s?.*\\.map/g, \"\");\n}\nexports.deleteComment = deleteComment;\n","/home/travis/build/npmtest/node-npmtest-karma-typescript/node_modules/karma-typescript/dist/bundler/dependency-walker.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar async = require(\"async\");\nvar diff = require(\"diff\");\nvar fs = require(\"fs\");\nvar glob = require(\"glob\");\nvar lodash = require(\"lodash\");\nvar os = require(\"os\");\nvar path = require(\"path\");\nvar ts = require(\"typescript\");\nvar pad = require(\"pad\");\nvar bundle_item_1 = require(\"./bundle-item\");\nvar DependencyWalker = (function () {\n    function DependencyWalker(log) {\n        this.log = log;\n        this.requireRegexp = /\\brequire\\b/;\n        this.walk = require(\"acorn/dist/walk\");\n    }\n    DependencyWalker.prototype.hasRequire = function (s) {\n        return this.requireRegexp.test(s);\n    };\n    DependencyWalker.prototype.collectTypescriptDependencies = function (queue) {\n        var _this = this;\n        var dependencyCount = 0;\n        queue.forEach(function (queued) {\n            queued.item.dependencies = _this.findUnresolvedTsRequires(queued.emitOutput.sourceFile);\n            var resolvedModules = queued.emitOutput.sourceFile.resolvedModules;\n            if (resolvedModules && !queued.emitOutput.sourceFile.isDeclarationFile) {\n                if (lodash.isMap(resolvedModules)) {\n                    resolvedModules.forEach(function (resolvedModule, moduleName) {\n                        queued.item.dependencies.push(new bundle_item_1.BundleItem(moduleName, resolvedModule && resolvedModule.resolvedFileName));\n                    });\n                }\n                else {\n                    Object.keys(resolvedModules).forEach(function (moduleName) {\n                        var resolvedModule = resolvedModules[moduleName];\n                        queued.item.dependencies.push(new bundle_item_1.BundleItem(moduleName, resolvedModule && resolvedModule.resolvedFileName));\n                    });\n                }\n            }\n            dependencyCount += queued.item.dependencies.length;\n        });\n        this.validateCase(queue);\n        return dependencyCount;\n    };\n    DependencyWalker.prototype.collectJavascriptDependencies = function (bundleItem, onDependenciesCollected) {\n        var _this = this;\n        var moduleNames = [];\n        var expressions = [];\n        var isRequire = function (node) {\n            return node.type === \"CallExpression\" &&\n                node.callee.type === \"Identifier\" &&\n                node.callee.name === \"require\";\n        };\n        var visitNode = function (node, state, c) {\n            if (!_this.hasRequire(bundleItem.source.slice(node.start, node.end))) {\n                return;\n            }\n            _this.walk.base[node.type](node, state, c);\n            if (isRequire(node) && node.arguments.length > 0) {\n                if (node.arguments[0].type === \"Literal\") {\n                    moduleNames.push(node.arguments[0].value);\n                }\n                else {\n                    expressions.push(node.arguments[0]);\n                }\n            }\n        };\n        this.walk.recursive(bundleItem.ast, null, {\n            Expression: visitNode,\n            Statement: visitNode\n        });\n        this.addDynamicDependencies(expressions, bundleItem, function (dynamicDependencies) {\n            onDependenciesCollected(moduleNames.concat(dynamicDependencies));\n        });\n    };\n    DependencyWalker.prototype.findUnresolvedTsRequires = function (sourceFile) {\n        var dependencies = [];\n        if (ts.isDeclarationFile(sourceFile)) {\n            return dependencies;\n        }\n        var visitNode = function (node) {\n            if (node.kind === ts.SyntaxKind.CallExpression) {\n                var ce = node;\n                var expression = ce.expression ?\n                    ce.expression :\n                    undefined;\n                var argument = ce.arguments && ce.arguments.length ?\n                    ce.arguments[0] :\n                    undefined;\n                if (expression && expression.text === \"require\" &&\n                    argument && typeof argument.text === \"string\") {\n                    dependencies.push(new bundle_item_1.BundleItem(argument.text));\n                }\n            }\n            ts.forEachChild(node, visitNode);\n        };\n        visitNode(sourceFile);\n        return dependencies;\n    };\n    DependencyWalker.prototype.addDynamicDependencies = function (expressions, bundleItem, onDynamicDependenciesAdded) {\n        var _this = this;\n        var dynamicDependencies = [];\n        if (expressions.length === 0) {\n            process.nextTick(function () {\n                onDynamicDependenciesAdded(dynamicDependencies);\n            });\n            return;\n        }\n        async.each(expressions, function (expression, onExpressionResolved) {\n            var dynamicModuleName = _this.parseDynamicRequire(expression);\n            var directory = path.dirname(bundleItem.filename);\n            var pattern;\n            if (dynamicModuleName && dynamicModuleName !== \"*\") {\n                if (new bundle_item_1.BundleItem(dynamicModuleName).isNpmModule()) {\n                    dynamicDependencies.push(dynamicModuleName);\n                    onExpressionResolved();\n                }\n                else {\n                    pattern = path.join(directory, dynamicModuleName);\n                    glob(pattern, function (globError, matches) {\n                        if (globError) {\n                            throw globError;\n                        }\n                        async.each(matches, function (match, onMatchResolved) {\n                            fs.stat(match, function (statError, stats) {\n                                if (statError) {\n                                    throw statError;\n                                }\n                                if (stats.isFile()) {\n                                    _this.log.debug(\"Dynamic require: \\nexpression: [%s]\" +\n                                        \"\\nfilename: %s\\nrequired by %s\\nglob: %s\", JSON.stringify(expression, undefined, 3), match, bundleItem.filename, pattern);\n                                    dynamicDependencies.push(\"./\" + path.relative(directory, match));\n                                }\n                                onMatchResolved();\n                            });\n                        }, onExpressionResolved);\n                    });\n                }\n            }\n            else {\n                onExpressionResolved();\n            }\n        }, function () {\n            onDynamicDependenciesAdded(dynamicDependencies);\n        });\n    };\n    DependencyWalker.prototype.parseDynamicRequire = function (expression) {\n        var visitNode = function (node) {\n            switch (node.type) {\n                case \"BinaryExpression\":\n                    if (node.operator === \"+\") {\n                        return visitNode(node.left) + visitNode(node.right);\n                    }\n                    break;\n                case \"ExpressionStatement\":\n                    return visitNode(node.expression);\n                case \"Literal\":\n                    return node.value + \"\";\n                case \"Identifier\":\n                    return \"*\";\n                default:\n                    return \"\";\n            }\n        };\n        return visitNode(expression);\n    };\n    DependencyWalker.prototype.validateCase = function (queue) {\n        var files = queue.map(function (q) {\n            return q.file.originalPath;\n        });\n        var fileslower = queue.map(function (q) {\n            return q.file.originalPath.toLowerCase();\n        });\n        queue.forEach(function (queued) {\n            if (queued.item.dependencies) {\n                queued.item.dependencies.forEach(function (dependency) {\n                    if (dependency.filename && files.indexOf(dependency.filename) === -1) {\n                        var lowerIndex = fileslower.indexOf(dependency.filename.toLowerCase());\n                        if (lowerIndex !== -1) {\n                            var result = diff.diffChars(files[lowerIndex], dependency.filename);\n                            var arrows_1 = \"\";\n                            result.forEach(function (part) {\n                                if (part.added) {\n                                    arrows_1 += \"^\";\n                                }\n                                else if (!part.removed) {\n                                    arrows_1 += pad(\"\", part.count);\n                                }\n                            });\n                            throw new Error(\"Uppercase/lowercase mismatch importing \" +\n                                dependency.moduleName + \" from \" + queued.file.originalPath +\n                                \":\" + os.EOL + os.EOL +\n                                \"filename:    \" + files[lowerIndex] + os.EOL +\n                                \"module name: \" + dependency.filename + os.EOL +\n                                \"             \" + arrows_1 + os.EOL);\n                        }\n                    }\n                });\n            }\n        });\n    };\n    return DependencyWalker;\n}());\nexports.DependencyWalker = DependencyWalker;\n","/home/travis/build/npmtest/node-npmtest-karma-typescript/node_modules/karma-typescript/.eslintrc.js":"module.exports = {\n    \"extends\": \"eslint:recommended\",\n    \"env\": {\n        \"node\": true\n    },\n    \"globals\": {\n        \"Promise\": true,\n        \"WeakMap\": true\n    },\n    \"rules\": {\n\n        // syntax\n        \"curly\": [\"error\"],\n        \"dot-notation\": [\"error\"],\n        \"eqeqeq\": [\"error\"],\n        \"indent\": [\"error\", 4, {\"SwitchCase\": 1}],\n        \"linebreak-style\": [\"error\", \"unix\"],\n        \"no-alert\": [\"error\"],\n        \"no-cond-assign\": [\"error\", \"always\"],\n        \"no-empty-function\": [\"error\"],\n        \"no-unused-expressions\": [\"error\"],\n        \"quotes\": [\"error\", \"double\"],\n        \"semi\": [\"error\", \"always\"],\n\n        // style\n        \"brace-style\": [\"error\", \"stroustrup\"]\n    }\n}\n","/home/travis/build/npmtest/node-npmtest-karma-typescript/node_modules/karma-typescript/gulpfile.js":"var copy = require(\"copy\"),\n    clear = require(\"cli-clear\"),\n    del = require(\"del\"),\n    gulp = require(\"gulp\"),\n    gutil = require(\"gulp-util\");\n\ngulp.task(\"clear\", function(cb) {\n    clear();\n    cb();\n});\n\ngulp.task(\"copy\", function(cb) {\n    copy(\"../../*.js\", \"./node_modules/karma-typescript/\", function() {\n        copy(\"../../dist/**/*.js\", \"./node_modules/karma-typescript/dist/\", function() {\n            copy(\"../../lib/*.js\", \"./node_modules/karma-typescript/lib/\", function() {\n                copy(\"../../src/client/*.js\", \"./node_modules/karma-typescript/src/client/\", function() {\n                    copy(\"../../transforms/*.js\", \"./node_modules/karma-typescript/transforms/\", cb);\n                });\n            });\n        });\n    });\n});\n\ngulp.task(\"clean\", function(cb) {\n    del(\"./coverage\")\n    .then(function(files) {\n        if(files.length > 0) {\n            gutil.log(\"Deleted %s\", files);\n        }\n        cb();\n    });\n});\n\ngulp.task(\"dev\", [\"clear\", \"clean\", \"copy\"]);\ngulp.task(\"dev:ci\", [\"clean\", \"copy\"]);\n","/home/travis/build/npmtest/node-npmtest-karma-typescript/node_modules/karma-typescript/src/client/commonjs.js":"(function(global) {\n    \"use strict\";\n    var modules = {},\n        fn = 0,\n        id = 1,\n        map = 2;\n    function require(filename, requiring, required) {\n        var wrapper,\n            module = modules[filename];\n        if (!module) {\n            wrapper = global.wrappers[filename];\n            if(!wrapper) {\n                throw new Error(\"Can't find \" + required + \" [\" + filename + \"] (required by \" + requiring + \")\");\n            }\n            module = { exports: {}, id: wrapper[id], uri: filename };\n            modules[filename] = module;\n            wrapper[fn].call(module.exports, function (dependency) {\n                return require(wrapper[map][dependency], filename, dependency);\n            }, module, module.exports, filename.slice(0, filename.lastIndexOf(\"/\")), filename);\n            if(module.exports && !module.exports.default && isExtensible(module.exports)) {\n                Object.defineProperty(module.exports, \"default\", {\n                    enumerable: false, configurable: true, writable: true, value: module.exports\n                });\n            }\n        }\n        return module.exports;\n    }\n    function isExtensible(obj) {\n        return (typeof obj === \"function\" || typeof obj === \"object\") && Object.isExtensible(obj);\n    }\n    (global.entrypointFilenames || []).forEach(function(filename) {\n        require(filename, \"commonjs.js\", \"entrypoint\");\n    });\n})(this);\n"}